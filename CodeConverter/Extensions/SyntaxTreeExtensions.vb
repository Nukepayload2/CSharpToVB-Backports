' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

Imports System.IO
Imports System.Runtime.CompilerServices
Imports System.Threading

Imports Microsoft.CodeAnalysis

Imports CS = Microsoft.CodeAnalysis.CSharp
Imports CSS = Microsoft.CodeAnalysis.CSharp.Syntax

Namespace Extensions
    Public Module SyntaxTreeExtensions
        Private ReadOnly s_autoGeneratedStrings() As String = {"< AutoGenerated", "<AutoGenerated", "<auto-generated"}

        Private Function BeginsWithAutoGeneratedComment(
        tree As SyntaxTree, isComment As Func(Of SyntaxTrivia, Boolean), cancelToken As CancellationToken) As Boolean
            Dim root As SyntaxNode = tree.GetRoot(cancelToken)
            If root.HasLeadingTrivia Then
                Dim leadingTrivia As SyntaxTriviaList = root.GetLeadingTrivia()

                For Each trivia As SyntaxTrivia In leadingTrivia
                    If Not isComment(trivia) Then
                        Continue For
                    End If

                    Dim text As String = trivia.ToString()

                    ' Check to see if the text of the comment contains an auto generated comment.
                    For Each autoGenerated As String In s_autoGeneratedStrings
                        If text.Contains(autoGenerated, StringComparison.OrdinalIgnoreCase) Then
                            Return True
                        End If
                    Next
                Next
            End If

            Return False
        End Function

        Private Function IsGeneratedCodeFile(filePath As String) As Boolean
            If Not String.IsNullOrEmpty(filePath) Then
                Dim fileName As String = Path.GetFileName(filePath)
                If fileName.StartsWith("TemporaryGeneratedFile_", StringComparison.OrdinalIgnoreCase) Then
                    Return True
                End If

                Dim extension As String = Path.GetExtension(fileName)
                If Not String.IsNullOrEmpty(extension) Then
                    Dim fileNameWithoutExtension As String = Path.GetFileNameWithoutExtension(filePath)
                    If fileNameWithoutExtension.EndsWith(".designer", StringComparison.OrdinalIgnoreCase) OrElse
                    fileNameWithoutExtension.EndsWith(".generated", StringComparison.OrdinalIgnoreCase) OrElse
                    fileNameWithoutExtension.EndsWith(".g", StringComparison.OrdinalIgnoreCase) OrElse
                    fileNameWithoutExtension.EndsWith(".g.i", StringComparison.OrdinalIgnoreCase) Then
                        Return True
                    End If
                End If
            End If

            Return False
        End Function

        Private Function MatchesNamespaceOrRoot(arg As SyntaxNode) As Boolean
            Return TypeOf arg Is CSS.NamespaceDeclarationSyntax OrElse TypeOf arg Is CSS.CompilationUnitSyntax
        End Function

        <Extension>
        Friend Function HasUsingDirective(tree As CS.CSharpSyntaxTree, fullName As String) As Boolean
            If tree Is Nothing Then
                Throw New ArgumentNullException(NameOf(tree))
            End If
            If String.IsNullOrWhiteSpace(fullName) Then
                Throw New ArgumentNullException(NameOf(fullName))
            End If
            fullName = fullName.Trim()
            Return tree.GetRoot().DescendantNodes(AddressOf MatchesNamespaceOrRoot).OfType(Of CSS.UsingDirectiveSyntax).Any(Function(u As CSS.UsingDirectiveSyntax) u.Name.ToString().Equals(fullName, StringComparison.OrdinalIgnoreCase))
        End Function

        <Extension>
        Public Function IsGeneratedCode(tree As SyntaxTree, isComment As Func(Of SyntaxTrivia, Boolean), cancelToken As CancellationToken) As Boolean
            If isComment Is Nothing Then
                Throw New ArgumentNullException(NameOf(isComment))
            End If

            If tree Is Nothing Then
                Throw New ArgumentNullException(NameOf(tree))
            End If
            Return IsGeneratedCodeFile(tree.GetRoot(cancelToken).ToFullString) OrElse BeginsWithAutoGeneratedComment(tree, isComment, cancelToken)
        End Function
    End Module
End Namespace
